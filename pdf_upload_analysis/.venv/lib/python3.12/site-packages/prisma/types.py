# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List['Serializable'],
    Dict[None, 'Serializable'],
    Dict[bool, 'Serializable'],
    Dict[float, 'Serializable'],
    Dict[int, 'Serializable'],
    Dict[str, 'Serializable'],
]


StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilter'],
        'mode': SortMode,
            },
    total=False,
)



class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilter'],
    },
    total=False,
)



class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilter'],
    },
    total=False,
)



class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilter'],
    },
    total=False,
)



class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilter'],
    },
    total=False,
)



class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilter'],
    },
    total=False,
)



class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilter'],
    },
    total=False,
)



class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Report types

class ReportOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Report create method"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ReportCreateInput(ReportOptionalCreateInput):
    """Required arguments to the Report create method"""
    title: _str
    content: _str
    date: datetime.datetime
    filePath: _str
    analysisResult: 'fields.Json'
    summary: _str
    userId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ReportOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Report create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ReportCreateWithoutRelationsInput(ReportOptionalCreateWithoutRelationsInput):
    """Required arguments to the Report create method, without relations"""
    title: _str
    content: _str
    date: datetime.datetime
    filePath: _str
    analysisResult: 'fields.Json'
    summary: _str
    userId: _str

class ReportConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ReportCreateWithoutRelationsInput'
    where: 'ReportWhereUniqueInput'

class ReportCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ReportCreateWithoutRelationsInput'
    connect: 'ReportWhereUniqueInput'
    connect_or_create: 'ReportConnectOrCreateWithoutRelationsInput'


class ReportCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ReportCreateWithoutRelationsInput', List['ReportCreateWithoutRelationsInput']]
    connect: Union['ReportWhereUniqueInput', List['ReportWhereUniqueInput']]
    connect_or_create: Union['ReportConnectOrCreateWithoutRelationsInput', List['ReportConnectOrCreateWithoutRelationsInput']]

_ReportWhereUnique_id_Input = TypedDict(
    '_ReportWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ReportWhereUniqueInput = _ReportWhereUnique_id_Input


class ReportUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    content: _str
    date: datetime.datetime
    filePath: _str
    analysisResult: 'fields.Json'
    summary: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ReportUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    content: _str
    date: datetime.datetime
    filePath: _str
    analysisResult: 'fields.Json'
    summary: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ReportUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ReportCreateWithoutRelationsInput']
    connect: List['ReportWhereUniqueInput']
    connect_or_create: List['ReportConnectOrCreateWithoutRelationsInput']
    set: List['ReportWhereUniqueInput']
    disconnect: List['ReportWhereUniqueInput']
    delete: List['ReportWhereUniqueInput']

    # TODO
    # update: List['ReportUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ReportUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ReportScalarWhereInput']
    # upsert: List['ReportUpserteWithWhereUniqueWithoutRelationsInput']


class ReportUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ReportCreateWithoutRelationsInput'
    connect: 'ReportWhereUniqueInput'
    connect_or_create: 'ReportConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ReportUpdateInput'
    # upsert: 'ReportUpsertWithoutRelationsInput'


class ReportUpsertInput(TypedDict):
    create: 'ReportCreateInput'
    update: 'ReportUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Report_id_OrderByInput = TypedDict(
    '_Report_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Report_title_OrderByInput = TypedDict(
    '_Report_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Report_content_OrderByInput = TypedDict(
    '_Report_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Report_date_OrderByInput = TypedDict(
    '_Report_date_OrderByInput',
    {
        'date': 'SortOrder',
    },
    total=True
)

_Report_filePath_OrderByInput = TypedDict(
    '_Report_filePath_OrderByInput',
    {
        'filePath': 'SortOrder',
    },
    total=True
)

_Report_analysisResult_OrderByInput = TypedDict(
    '_Report_analysisResult_OrderByInput',
    {
        'analysisResult': 'SortOrder',
    },
    total=True
)

_Report_summary_OrderByInput = TypedDict(
    '_Report_summary_OrderByInput',
    {
        'summary': 'SortOrder',
    },
    total=True
)

_Report_userId_OrderByInput = TypedDict(
    '_Report_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Report_createdAt_OrderByInput = TypedDict(
    '_Report_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Report_updatedAt_OrderByInput = TypedDict(
    '_Report_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

ReportOrderByInput = Union[
    '_Report_id_OrderByInput',
    '_Report_title_OrderByInput',
    '_Report_content_OrderByInput',
    '_Report_date_OrderByInput',
    '_Report_filePath_OrderByInput',
    '_Report_analysisResult_OrderByInput',
    '_Report_summary_OrderByInput',
    '_Report_userId_OrderByInput',
    '_Report_createdAt_OrderByInput',
    '_Report_updatedAt_OrderByInput',
]



# recursive Report types
# TODO: cleanup these types



ReportRelationFilter = TypedDict(
    'ReportRelationFilter',
    {
        'is': 'ReportWhereInput',
        'is_not': 'ReportWhereInput',
    },
    total=False,
)


class ReportListRelationFilter(TypedDict, total=False):
    some: 'ReportWhereInput'
    none: 'ReportWhereInput'
    every: 'ReportWhereInput'


class ReportInclude(TypedDict, total=False):
    """Report relational arguments"""


class ReportIncludeFromReport(TypedDict, total=False):
    """Relational arguments for Report"""


class ReportArgsFromReport(TypedDict, total=False):
    """Arguments for Report"""
    include: 'ReportIncludeFromReport'


class FindManyReportArgsFromReport(TypedDict, total=False):
    """Arguments for Report"""
    take: int
    skip: int
    order_by: Union['ReportOrderByInput', List['ReportOrderByInput']]
    where: 'ReportWhereInput'
    cursor: 'ReportWhereUniqueInput'
    distinct: List['ReportScalarFieldKeys']
    include: 'ReportIncludeFromReport'




FindManyReportArgs = FindManyReportArgsFromReport
FindFirstReportArgs = FindManyReportArgsFromReport


class ReportWhereInput(TypedDict, total=False):
    """Report arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    filePath: Union[_str, 'types.StringFilter']
    analysisResult: Union['fields.Json', 'types.JsonFilter']
    summary: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ReportWhereInput', List['ReportWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ReportWhereInput']
    OR: List['ReportWhereInput']
    NOT: List['ReportWhereInput']



# aggregate Report types


class ReportScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Report arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    filePath: Union[_str, 'types.StringWithAggregatesFilter']
    analysisResult: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    summary: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReportScalarWhereWithAggregatesInput']
    OR: List['ReportScalarWhereWithAggregatesInput']
    NOT: List['ReportScalarWhereWithAggregatesInput']



class ReportGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    content: _str
    date: datetime.datetime
    filePath: _str
    analysisResult: 'fields.Json'
    summary: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ReportSumAggregateOutput'
    _avg: 'ReportAvgAggregateOutput'
    _min: 'ReportMinAggregateOutput'
    _max: 'ReportMaxAggregateOutput'
    _count: 'ReportCountAggregateOutput'


class ReportAvgAggregateOutput(TypedDict, total=False):
    """Report output for aggregating averages"""


class ReportSumAggregateOutput(TypedDict, total=False):
    """Report output for aggregating sums"""


class ReportScalarAggregateOutput(TypedDict, total=False):
    """Report output including scalar fields"""
    id: _str
    title: _str
    content: _str
    date: datetime.datetime
    filePath: _str
    analysisResult: 'fields.Json'
    summary: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ReportMinAggregateOutput = ReportScalarAggregateOutput
ReportMaxAggregateOutput = ReportScalarAggregateOutput


class ReportMaxAggregateInput(TypedDict, total=False):
    """Report input for aggregating by max"""
    id: bool
    title: bool
    content: bool
    date: bool
    filePath: bool
    analysisResult: bool
    summary: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class ReportMinAggregateInput(TypedDict, total=False):
    """Report input for aggregating by min"""
    id: bool
    title: bool
    content: bool
    date: bool
    filePath: bool
    analysisResult: bool
    summary: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class ReportNumberAggregateInput(TypedDict, total=False):
    """Report input for aggregating numbers"""


ReportAvgAggregateInput = ReportNumberAggregateInput
ReportSumAggregateInput = ReportNumberAggregateInput


ReportCountAggregateInput = TypedDict(
    'ReportCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'content': bool,
        'date': bool,
        'filePath': bool,
        'analysisResult': bool,
        'summary': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ReportCountAggregateOutput = TypedDict(
    'ReportCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'content': int,
        'date': int,
        'filePath': int,
        'analysisResult': int,
        'summary': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ReportKeys = Literal[
    'id',
    'title',
    'content',
    'date',
    'filePath',
    'analysisResult',
    'summary',
    'userId',
    'createdAt',
    'updatedAt',
]
ReportScalarFieldKeys = Literal[
    'id',
    'title',
    'content',
    'date',
    'filePath',
    'analysisResult',
    'summary',
    'userId',
    'createdAt',
    'updatedAt',
]
ReportScalarFieldKeysT = TypeVar('ReportScalarFieldKeysT', bound=ReportScalarFieldKeys)

ReportRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields